//These are the essential header files for this simplest posssible
//MYSQL-C-API sample
#include <stdio.h>
#include <stdlib.h>
#include <my_global.h>
#include <my_sys.h>
#include <mysql.h>
#include <string.h>


//These are our pre-defined information which will come in handy
//when user wants to print the credits information
#define SIMPLE_PASSWORD_AUTHUR "Aliireeza Teymoorian"
#define SIMPLE_PASSWORD_VERSION "1.0.1 Winter 2018"
#define SIMPLE_PASSWORD_COMPILER "GNU/GCC 7.2.1"
#define SIMPLE_PASSWORD_LICENSE "GNU/GPL v3"


//Server Host Name, default = localhost
static char *opt_host_name = "localhost";
//Username, default = your login name
static char *opt_user_name = "root";
//Password, default = none
static char *opt_password = "MariaDBRoot";
//Port Number, default use built-in value
static unsigned int opt_port_number = 0;
//Socket Name, default use built-in value
static char *opt_socket_name = NULL;
//Database Name, default = none
static char *opt_db_name = NULL;
//connection flags (none)
static unsigned int opt_flags = 0;


//pointer to our connection handler
static MYSQL *conn;

//This is our universal error  printing function
static void print_error(MYSQL *conn, char *message){
	//First it print programmer-defined error messages
	fprintf(stderr,"%s\n", message);
	if(conn){
		//Then due to the version of your mysql it uses below functions
		//mysql_error will return a string comment about the occured error
		//mysql_errno will return an negative integer number of the error
		//mysql_sqlstate will also return a number, but it defines only in mysql states and returned actually as a string
		#if MYSQL_VERSION_ID >= 40101
			fprintf(stderr, "ERROR %u (%s): %s\n", mysql_errno(conn), mysql_sqlstate(conn), mysql_error(conn));
		#else
			fprintf(stderr, "ERROR %u: %s\n", mysql_errno(conn), mysql_error(coon));
		#endif
	}
}



//This is the section in which we will process the SQL queries and
//retrive the answers from database, then show the results to the user
//Three below functions will do that and they could be reused almost
//without any change in any similar applications

//This function will process and show the result set retrived from executing a correct query
static void process_result_set(MYSQL *conn, MYSQL_RES *res_set){
	MYSQL_ROW row;
	unsigned int i;
	//For each record of the result set, we can obtain a row with
	//mysql_fetch_row function and check it wether it would be null
	while((row = mysql_fetch_row(res_set)) != NULL){
		//For showing information of each row, we have to seperate them
		//and the mysql_num_fields will give us the number of columns
		for(i=0; i<mysql_num_fields(res_set); i++){
			if(i>0)
				fputc('\t', stdout);
			printf("%s", row[i] != NULL ? row[i] : "NULL");
		}
		fputc('\n', stdout);
	}

	//after printing each line, there might be one of these two options:
	//First we have experienced an error which leads us to print error function
	//Second we did all things correctlly and we could print the number of lines that printed
	if(mysql_errno(conn) != 0)
		print_error(conn, "mysql_fetch_row() has failed");
	else
		printf("\nQuery handled: %lu rows returned\n", (unsigned long) mysql_num_rows(res_set));
}


//This function will send a SQL query to the database and check wether it
//could returna valid result set or might lead to an error
static void process_statement(MYSQL *conn, char *statement){
	MYSQL_RES *res_set;
	//This function will send our SQL statement to the database and await the result
	if(mysql_query(conn, statement)){
		print_error(conn, "Query Failed: Could not execute the statement");
		return;
	}

	//If the SQL statement executed in the database, it might return a
	//result set and store them in user memory with meysql_store_result
	res_set = mysql_store_result(conn);
	//If this result set was not empty then we could process the results
	//and afterwards we could release the memory
	if(res_set){
		process_result_set(conn, res_set);
		mysql_free_result(res_set);
	}
	//Otherwise, the result set is null and there will be only two possibilities
	//Either our query handled correctly but there were no printable results or we have experienced an error
	else{
		//If the reult set was empty due to the nature of SQL statment and not an error, then we print out the number of rows which have been effected by that statement
		if(mysql_field_count(conn) == 0)
			printf("\nQuery handled: %lu rows affected\n", (unsigned long) mysql_affected_rows(conn));
		else
			print_error(conn, "\nQuery Failed: Could not retrive the result set");
	}
}



//This function creates a simple information about the program
static void show_credits(){
	printf("Simple Password Version %s\n", SIMPLE_PASSWORD_VERSION);
	printf("Created By %s\n", SIMPLE_PASSWORD_AUTHUR);
	printf("USING %s COMPILER, ", SIMPLE_PASSWORD_COMPILER);
	printf("DATABASE %s\n", mysql_get_client_info());
	printf("Published Under %s License\n", SIMPLE_PASSWORD_LICENSE);
}


//This function creates the correct SQL query to search for a specific person in the phonebook
static void search_password(){
	char statement[140];
	char first_name[41], last_name[41];

	printf("Enter Your First Name: ");
	scanf("%s", first_name);
	printf("Enter Your Last Name: ");
	scanf("%s", last_name);
	printf("\n---------------------------------\n\n");

	sprintf(statement, "SELECT name, LPAD(national_id, 10, 0), DECODE(password, PASSWORD(LPAD(national_id, 10, 0))) FROM pass WHERE name LIKE CONCAT(\'%s\', \' \', \'%s\')", first_name, last_name);
	process_statement(conn, statement);
}


//This function creates the correct SQL query to list whole contacts and all their information
static void list_contacts(){
	char statement[60];
	sprintf(statement, "SELECT name, LPAD(national_id, 10, 0) FROM pass");
	process_statement(conn, statement);
}


//This function creates the correct SQL query to insert a new contact into our phonebook
static void insert_contact(){
	char statement[280];

	char first_name[41], last_name[41];
	char national_id[15], password[41];

	printf("Enter Your First Name: ");
	scanf("%s", first_name);
	printf("Enter Your Last Name: ");
	scanf("%s", last_name);
	printf("Enter Your National ID: ");
	scanf("%s", national_id);
	printf("Enter A Password: ");
	scanf("%s", password);
	printf("\n---------------------------------\n\n");

	sprintf(statement, "INSERT INTO pass VALUES (CONCAT(\'%s\', \' \', \'%s\'), \'%s\', ENCODE(\'%s\', PASSWORD(LPAD(\'%s\', 10, 0))))", first_name, last_name, national_id, password, national_id);
	process_statement(conn, statement);
}


//This function creates the correct SQL query to remove all contacts from our phonebook
static void drop_contacts(){
	char statement[30];
	sprintf(statement, "DELETE FROM pass");
	process_statement(conn, statement);
}





//Depend on the user choice in face of the menu, this function will choose the write action to do next, simply means that it select which other function should run, each of those function should create the correct SQL query
static void process_user_choice(int choice){
	switch(choice){
		case 0:
			show_credits();
			break;
		case 1:
			search_password();
			break;
		case 2:
			list_contacts();
			break;
		case 3:
			insert_contact();
			break;
		case 4:
			drop_contacts();
			break;
		default:
			printf("Goodbye ;)\n");
			mysql_close(conn);
			exit(0);
	}
}


//For user convenient this fuction will create a simple menu and request an option from user
static int show_user_menu(){
	int choice;
	//After our simple prompt we will show these Eight options
	printf("\n----------  MAIN MENU  ----------\n");
	printf("\n0.Show Credits\t1.Search Password\n");
	printf("2.List Contacts\t3.Insert Contact\n");
	printf("4.Drop Contacts\tE.Quit Application\n\n");

	printf("Select Your Choice: ");
	scanf("%d", &choice);
	printf("\n---------------------------------\n\n");
	return choice;
}




//This function will connect to mysql or mariadb RDBMS
//then create a database, connect to it and create a table in it
//
//use mysql_int for initializing a MYSQL connection data structure
//use mysql_real_connect to connect to a RDBMS with a specific username and password and other options
//use mysql_query to send our SQL-style queries such as creating a database and table
//use mysql_select_db after creating a database to conect to it and create a table in it
static void create_and_connect(){
	printf("INITIALIZING our Database ...");
	//First we need to initialize our connection data structure
	conn = mysql_init(NULL);
	if(!conn){
		printf(" Failed\n");
		print_error(NULL, "mysql_init() has failed, Probably out of memory");
		exit(1);
	}

	//Second, we will connect to the MySQL or MariaDB RDBMS
	if(!mysql_real_connect(conn, opt_host_name, opt_user_name, opt_password, opt_db_name, opt_port_number, opt_socket_name, opt_flags)){
		printf(" Failed\n");
		print_error(conn, "mysql_real_connect() has failed");
		mysql_close(conn);
		exit(1);
	}

	//Third, if everything has gone well, we want to create our database and table, if they were not created yet
	if(mysql_query(conn, "CREATE DATABASE IF NOT EXISTS password")){
		printf(" Failed\n");
		print_error(conn, "Creation of password database has failed");
		mysql_close(conn);
		exit(1);
	}

	//Fourth, we have to use that database
	if(mysql_select_db(conn, "password")){
		printf(" Failed\n");
		print_error(conn, "Using password database has failed");
		mysql_close(conn);
		exit(1);
	}

	//Fifth, at the last stage we want to create a table for our phone book if that was not exists
	if(mysql_query(conn, "CREATE TABLE IF NOT EXISTS pass(name VARCHAR(80) NOT NULL, national_id INT(10) NOT NULL, password VARCHAR(40) NOT NULL, PRIMARY KEY (national_id));")){
		printf(" Failed\n");
		print_error(conn, "Creation of password table has failed");
		mysql_close(conn);
		exit(1);
	}

	printf(" OK\n");
}


//This is the mail part of our program
int main(int argc, char *argv[]){
	int choice;

	//First of all we need to process mysql options given by the user


	//Second, we need to create a database and a proper table for it
	create_and_connect();

	//Now the databse and table has created, so we have to show the user menu
	while((choice = show_user_menu()) >= 0 && choice <= 8)
		process_user_choice(choice);

	//At the end, we have to terminate the connection to the database and exit
	printf("You have entered wrong option, program terminated ...\n");
	mysql_close(conn);
	exit(0);
}









